import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db';
import { Frequency } from '@prisma/client';

export async function POST(request: NextRequest) {
    try {
        const { templateId, generateDate } = await request.json();

        if (!templateId) {
            return NextResponse.json(
                { error: 'Template ID is required' },
                { status: 400 }
            );
        }

        const template = await prisma.recurringTemplate.findUnique({
            where: { id: templateId },
            include: { category: true },
        });

        if (!template) {
            return NextResponse.json(
                { error: 'Recurring template not found' },
                { status: 404 }
            );
        }

        if (!template.isActive) {
            return NextResponse.json(
                { error: 'Template is not active' },
                { status: 400 }
            );
        }

        const targetDate = generateDate ? new Date(generateDate) : new Date();

        // Check if we should generate a transaction for this date
        const currentNextDueDate = new Date(template.nextDueDate);
        if (targetDate < currentNextDueDate) {
            return NextResponse.json(
                { error: 'Not yet due for generation' },
                { status: 400 }
            );
        }

        // Check if end date has passed
        if (template.endDate && targetDate > new Date(template.endDate)) {
            return NextResponse.json(
                { error: 'Template has expired' },
                { status: 400 }
            );
        }

        // Generate the transaction
        let generatedTransaction;

        if (template.type === 'EXPENSE') {
            generatedTransaction = await prisma.expense.create({
                data: {
                    amount: template.amount,
                    description: template.description,
                    date: targetDate,
                    categoryId: template.categoryId!,
                    recurringTemplateId: template.id,
                    isAutoGenerated: true,
                },
                include: {
                    category: true,
                    recurringTemplate: true,
                },
            });
        } else {
            generatedTransaction = await prisma.income.create({
                data: {
                    amount: template.amount,
                    description: template.description,
                    date: targetDate,
                    recurringTemplateId: template.id,
                    isAutoGenerated: true,
                },
                include: {
                    recurringTemplate: true,
                },
            });
        }

        // Calculate next due date
        const nextDueDate = calculateNextDueDate(targetDate, template.frequency, template.interval);

        // Update the template's next due date
        await prisma.recurringTemplate.update({
            where: { id: template.id },
            data: { nextDueDate },
        });

        return NextResponse.json({
            message: 'Transaction generated successfully',
            transaction: generatedTransaction,
            nextDueDate,
        });

    } catch (error) {
        console.error('Error generating transaction:', error);
        return NextResponse.json(
            { error: 'Failed to generate transaction' },
            { status: 500 }
        );
    }
}

// Auto-generate all due transactions
export async function GET() {
    try {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        // Find all active templates that are due
        const dueTemplates = await prisma.recurringTemplate.findMany({
            where: {
                isActive: true,
                nextDueDate: {
                    lte: today,
                },
                OR: [
                    { endDate: null },
                    { endDate: { gte: today } },
                ],
            },
            include: {
                category: true,
            },
        });

        const results = [];

        for (const template of dueTemplates) {
            try {
                let generatedTransaction;

                if (template.type === 'EXPENSE') {
                    generatedTransaction = await prisma.expense.create({
                        data: {
                            amount: template.amount,
                            description: template.description,
                            date: today,
                            categoryId: template.categoryId!,
                            recurringTemplateId: template.id,
                            isAutoGenerated: true,
                        },
                        include: {
                            category: true,
                            recurringTemplate: true,
                        },
                    });
                } else {
                    generatedTransaction = await prisma.income.create({
                        data: {
                            amount: template.amount,
                            description: template.description,
                            date: today,
                            recurringTemplateId: template.id,
                            isAutoGenerated: true,
                        },
                        include: {
                            recurringTemplate: true,
                        },
                    });
                }

                // Calculate next due date
                const nextDueDate = calculateNextDueDate(today, template.frequency, template.interval);

                // Update the template's next due date
                await prisma.recurringTemplate.update({
                    where: { id: template.id },
                    data: { nextDueDate },
                });

                results.push({
                    templateId: template.id,
                    transaction: generatedTransaction,
                    nextDueDate,
                });

            } catch (error) {
                console.error(`Error generating transaction for template ${template.id}:`, error);
                results.push({
                    templateId: template.id,
                    error: 'Failed to generate transaction',
                });
            }
        }

        return NextResponse.json({
            message: `Processed ${dueTemplates.length} templates`,
            results,
        });

    } catch (error) {
        console.error('Error in auto-generation:', error);
        return NextResponse.json(
            { error: 'Failed to auto-generate transactions' },
            { status: 500 }
        );
    }
}

function calculateNextDueDate(
    currentDate: Date,
    frequency: Frequency,
    interval: number
): Date {
    const nextDate = new Date(currentDate);

    switch (frequency) {
        case 'WEEKLY':
            nextDate.setDate(nextDate.getDate() + interval * 7);
            break;
        case 'MONTHLY':
            nextDate.setMonth(nextDate.getMonth() + interval);
            break;
        case 'YEARLY':
            nextDate.setFullYear(nextDate.getFullYear() + interval);
            break;
    }

    return nextDate;
} 